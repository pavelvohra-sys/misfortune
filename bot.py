# -*- coding: utf-8 -*-
import os, json, logging, glob
from pathlib import Path
from datetime import datetime, timezone, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ForceReply
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, ContextTypes, Defaults,
    CallbackQueryHandler, MessageHandler, filters
)

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤—É –∏–∑ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–∏
from misfortune import read_howl, render_reading

# –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –Ω–µ—Å—á–∞—Å—Ç–∏–π (–¥–ª—è /diag). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ.
try:
    from misfortune import MISFORTUNES
except Exception:
    MISFORTUNES = None

# –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –≤–µ—Ç–≤–µ–π (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å)
try:
    from misfortune import ensure_icons, icon_filename
except Exception:
    ensure_icons = None
    icon_filename = None

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
TIMEZONE_OFFSET_HOURS = 3   # –ø–æ–ø—Ä–∞–≤—å –ø–æ–¥ —Å–≤–æ–π –ø–æ—è—Å
LOCAL_TZ = timezone(timedelta(hours=TIMEZONE_OFFSET_HOURS))
ASSETS_DIR = os.getenv("ASSETS_DIR", "assets")

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

DATA_FILE = "howls.json"

def _load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def _save_data(db):
    tmp = DATA_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)
    os.replace(tmp, DATA_FILE)

def _record(chat_id: int, dt: datetime, doom_code: str, level: int):
    db = _load_data()
    key = str(chat_id)
    db.setdefault(key, []).append({"ts": dt.isoformat(timespec="minutes"), "doom": doom_code, "lvl": level})
    db[key] = db[key][-5:]
    _save_data(db)

def _salt(chat_id: int) -> int:
    return abs(chat_id) % 97

# ===== –ú–µ–¥–∏–∞-–ø–æ–º–æ—â–Ω–∏–∫–∏ =====
def pick_doom_image(code: str) -> str | None:
    """
    –ò—â–µ–º: assets/<code>.{png|jpg|jpeg|webp} (–ª—é–±–æ–π —Ä–µ–≥–∏—Å—Ç—Ä),
          assets/<code>_*.ext, assets/<code>-*.ext
    """
    base = code.lower()
    d = ASSETS_DIR
    if not os.path.isdir(d):
        logging.warning("assets dir not found: %s", d)
        return None

    # –°–æ–±–µ—Ä—ë–º –∫–∞–Ω–æ–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    exts = ["png", "jpg", "jpeg", "webp"]
    patterns = []
    for ext in exts:
        patterns += [
            os.path.join(d, f"{base}.{ext}"),
            os.path.join(d, f"{base}_*.{ext}"),
            os.path.join(d, f"{base}-*.{ext}"),
            os.path.join(d, f"{base}.{ext.upper()}"),
            os.path.join(d, f"{base}_*.{ext.upper()}"),
            os.path.join(d, f"{base}-*.{ext.upper()}"),
        ]

    # –ü—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ glob
    found = []
    for pat in patterns:
        found += glob.glob(pat)

    if found:
        found.sort()
        logging.info("picked doom image for %s: %s", code, found[0])
        return found[0]

    # –§–æ–ª–ª–±–µ–∫: –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ assets –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –º–∞—Ç—á–∏—Ç—å –ø–æ –Ω–∞—á–∞–ª—É –∏–º–µ–Ω–∏ (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    all_files = [p for p in Path(d).iterdir() if p.is_file()]
    for p in sorted(all_files):
        stem = p.stem.lower()   # –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if stem == base or stem.startswith(base + "_") or stem.startswith(base + "-"):
            logging.info("fallback picked doom image for %s: %s", code, p)
            return str(p)

    logging.warning("no doom image for code=%s", code)
    return None

async def send_with_media(message, text_html: str, doom_code: str, branch_py: str):
    """–ü—Ä–æ–±—É–µ–º: –∞—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -> –∏–∫–æ–Ω–∫–∞ –≤–µ—Ç–≤–∏ -> –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç"""
    # 1) –∞—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    p = pick_doom_image(doom_code)
    if p and os.path.exists(p):
        try:
            await message.reply_photo(photo=open(p, "rb"), caption=text_html, parse_mode=ParseMode.HTML)
            return
        except Exception as e:
            logging.warning("failed to send category art %s: %s", p, e)

    # 2) –∏–∫–æ–Ω–∫–∞ –≤–µ—Ç–≤–∏ (–µ—Å–ª–∏ misfortune —É–º–µ–µ—Ç)
    if ensure_icons and icon_filename:
        try:
            ensure_icons()
            ipath = icon_filename(branch_py)
            if os.path.exists(ipath):
                await message.reply_photo(photo=open(ipath, "rb"), caption=text_html, parse_mode=ParseMode.HTML)
                return
        except Exception as e:
            logging.warning("failed to send branch icon: %s", e)

    # 3) fallback: —Ç–µ–∫—Å—Ç
    await message.reply_text(text_html, parse_mode=ParseMode.HTML)

# ===== –ö–æ–º–∞–Ω–¥—ã =====
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caption = (
        "<b>HOWL ‚Äî –±–æ—Ç –Ω–µ—Å—á–∞—Å—Ç–∏–π</b>\n\n"
        "–£—Å–ª—ã—à–∞–ª –≤–æ–π –¥—É—Ö–∞? –ñ–º–∏ <b>¬´–ì–∞–¥–∞—Ç—å —Å–µ–π—á–∞—Å¬ª</b> –∏–ª–∏ <b>¬´–í–≤–µ—Å—Ç–∏ –º–æ–º–µ–Ω—Ç¬ª</b> ‚Äî –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–æ—è.\n"
        "–ú–æ–∂–Ω–æ –∏ –∫–æ–º–∞–Ω–¥–æ–π: <code>/howl YYYY-MM-DD [HH:MM]</code>."
        f"\n\n<i>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –±–æ—Ç–∞:</i> UTC{TIMEZONE_OFFSET_HOURS:+d}:00"
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÆ –ì–∞–¥–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="howl_now")],
        [InlineKeyboardButton("‚åö –í–≤–µ—Å—Ç–∏ –º–æ–º–µ–Ω—Ç", callback_data="howl_ask")],
        [InlineKeyboardButton("üßæ –ü—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–µ–≤", callback_data="howl_last")],
    ])
    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    welcome = "welcome.png"
    if os.path.exists(welcome):
        await update.message.reply_photo(photo=open(welcome, "rb"), caption=caption, reply_markup=kb, parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(caption, reply_markup=kb, parse_mode=ParseMode.HTML)

async def cmd_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    items = _load_data().get(str(chat_id), [])
    if not items:
        await update.message.reply_text("–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ù–∞–∂–º–∏ ¬´–ì–∞–¥–∞—Ç—å —Å–µ–π—á–∞—Å¬ª –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –º–æ–º–µ–Ω—Ç.")
        return
    lines = [f"#{len(items)-i}. {it['ts']} ‚Äî {it['doom']} (—É—Ä. {it['lvl']})" for i, it in enumerate(reversed(items))]
    await update.message.reply_text("<b>–ü—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–µ–≤</b>\n" + "\n".join(lines), parse_mode=ParseMode.HTML)

async def cmd_howl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    salt = _salt(chat_id)
    if context.args:
        try:
            if len(context.args) == 1:
                dt = datetime.strptime(context.args[0], "%Y-%m-%d")
            else:
                dt = datetime.strptime(context.args[0] + " " + context.args[1], "%Y-%m-%d %H:%M")
        except Exception:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /howl YYYY-MM-DD [HH:MM]")
            return
    else:
        dt = update.message.date.astimezone(LOCAL_TZ).replace(tzinfo=None)

    r = read_howl(dt, salt=salt)
    await send_with_media(update.message, render_reading(r), r.doom["code"], r.branch_tuple[1])
    _record(chat_id, dt, r.doom["code"], r.doom_level)

# ===== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ =====
async def cmd_diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = [f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–µ—Ç–æ–≤</b> (–∫–∞—Ç–∞–ª–æ–≥: <code>{ASSETS_DIR}</code>)"]
    if not os.path.isdir(ASSETS_DIR):
        await update.message.reply_text("\n".join(lines + ["–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ assets –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."]), parse_mode=ParseMode.HTML)
        return

    if MISFORTUNES:
        miss = []
        ok = 0
        for m in MISFORTUNES:
            code = m.get("code", "").lower().strip()
            p = pick_doom_image(code)
            if p and os.path.exists(p):
                ok += 1
            else:
                miss.append(code)
        lines.append(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <b>{ok}</b> / {len(MISFORTUNES)}")
        if miss:
            lines.append("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–¥–æ–≤: " + ", ".join(miss))
    else:
        # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
        files = sorted([p.name for p in Path(ASSETS_DIR).glob("*") if p.is_file()])[:10]
        lines.append("–ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –≤ assets: " + (", ".join(files) if files else "–ø—É—Å—Ç–æ"))
        lines.append("–ò –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –∏–º–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–¥–∞–º –∏–∑ MISFORTUNES.")

    await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# ===== Inline-–ø–æ—Ç–æ–∫ =====
async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()

    if data == "howl_now":
        dt = datetime.now(tz=LOCAL_TZ).replace(tzinfo=None)
        chat_id = update.effective_chat.id
        salt = _salt(chat_id)
        r = read_howl(dt, salt=salt)
        await send_with_media(q.message, render_reading(r), r.doom["code"], r.branch_tuple[1])
        _record(chat_id, dt, r.doom["code"], r.doom_level)

    elif data == "howl_ask":
        prompt = "–ü—Ä–∏—à–ª–∏—Ç–µ –º–æ–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>YYYY-MM-DD HH:MM</code> (–º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è)"
        await q.message.reply_text(prompt, reply_markup=ForceReply(selective=True), parse_mode=ParseMode.HTML)

    elif data == "howl_last":
        await cmd_last(update, context)

# –ª–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ ForceReply
async def on_reply_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.reply_to_message:
        return
    if "–ü—Ä–∏—à–ª–∏—Ç–µ –º–æ–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ" not in (update.message.reply_to_message.text or ""):
        return
    chat_id = update.effective_chat.id
    salt = _salt(chat_id)
    txt = (update.message.text or "").strip()
    try:
        if " " in txt:
            dt = datetime.strptime(txt, "%Y-%m-%d %H:%M")
        else:
            dt = datetime.strptime(txt, "%Y-%m-%d")
    except Exception:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>2025-10-01 14:30</code>", parse_mode=ParseMode.HTML)
        return
    r = read_howl(dt, salt=salt)
    await send_with_media(update.message, render_reading(r), r.doom["code"], r.branch_tuple[1])
    _record(chat_id, dt, r.doom["code"], r.doom_level)

def main():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise SystemExit("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_TOKEN")

    app = Application.builder().token(token).defaults(Defaults(parse_mode=ParseMode.HTML)).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("howl", cmd_howl))
    app.add_handler(CommandHandler("last", cmd_last))
    app.add_handler(CommandHandler("diag", cmd_diag))     # <‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—Å—Å–µ—Ç–æ–≤
    app.add_handler(CallbackQueryHandler(on_cb))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_reply_datetime))

    webhook_base = os.getenv("WEBHOOK_URL") or os.getenv("RENDER_EXTERNAL_URL")
    port = int(os.getenv("PORT", "8080"))
    if webhook_base:
        webhook_url = webhook_base.rstrip("/") + "/" + token
        logging.info("Starting webhook at %s", webhook_url)
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=token,
            webhook_url=webhook_url,
        )
    else:
        logging.info("Starting long polling")
        app.run_polling()

if __name__ == "__main__":
    main()
