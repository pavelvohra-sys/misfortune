# -*- coding: utf-8 -*-
import os, json, logging, glob, zipfile
from pathlib import Path
from datetime import datetime, timezone, timedelta
from zoneinfo import ZoneInfo

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ForceReply, BotCommand
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, ContextTypes, Defaults,
    CallbackQueryHandler, MessageHandler, filters
)

# ---- —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –≥–∞–¥–∞–Ω–∏–π ----
from misfortune import read_howl, render_reading
try:
    from misfortune import MISFORTUNES
except Exception:
    MISFORTUNES = None
try:
    from misfortune import ensure_icons, icon_filename
except Exception:
    ensure_icons = None
    icon_filename = None

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–µ—Ñ–æ–ª—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –∑–∞–¥–∞–ª —Å–≤–æ—é TZ) =====
TIMEZONE_OFFSET_HOURS = 3
ASSETS_DIR = os.getenv("ASSETS_DIR", "assets")

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

DATA_FILE = "howls.json"   # –∏—Å—Ç–æ—Ä–∏—è 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞ —á–∞—Ç
TZ_FILE   = "tz.json"      # –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–π–º-–∑–æ–Ω—ã

# ====== –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ======
def _load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def _save_data(db):
    tmp = DATA_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)
    os.replace(tmp, DATA_FILE)

def _record(chat_id: int, dt: datetime, doom_code: str, level: int):
    db = _load_data()
    key = str(chat_id)
    db.setdefault(key, []).append({"ts": dt.isoformat(timespec="minutes"), "doom": doom_code, "lvl": level})
    db[key] = db[key][-5:]
    _save_data(db)

def _salt(chat_id: int) -> int:
    return abs(chat_id) % 97

# ====== –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–π–º-–∑–æ–Ω—ã ======
def _load_tz_db():
    if not os.path.exists(TZ_FILE):
        return {}
    try:
        with open(TZ_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def _save_tz_db(db):
    tmp = TZ_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)
    os.replace(tmp, TZ_FILE)

def _parse_tz(s: str):
    s = s.strip()
    if s.startswith(("+", "-")):
        sign = 1 if s[0] == "+" else -1
        body = s[1:]
        if ":" in body:
            hh, mm = body.split(":", 1)
            hh, mm = int(hh), int(mm)
        else:
            hh, mm = int(body), 0
        return timezone(sign * timedelta(hours=hh, minutes=mm))
    return ZoneInfo(s)

def _set_user_tz(chat_id: int, tz_input: str) -> str:
    db = _load_tz_db()
    db[str(chat_id)] = tz_input.strip()
    _save_tz_db(db)
    return tz_input.strip()

def _get_user_tzinfo(chat_id: int, fallback_hours: int = TIMEZONE_OFFSET_HOURS):
    db = _load_tz_db()
    raw = db.get(str(chat_id))
    if not raw:
        return timezone(timedelta(hours=fallback_hours))
    try:
        return _parse_tz(raw)
    except Exception:
        return timezone(timedelta(hours=fallback_hours))

# ====== –†–∞–±–æ—Ç–∞ —Å –∞—Å—Å–µ—Ç–∞–º–∏ ======
def ensure_assets_dir():
    """–ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ assets/, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –ª—é–±–æ–π assets*.zip –≤ –∫–æ—Ä–Ω–µ."""
    d = ASSETS_DIR
    if os.path.isdir(d):
        return
    zips = [p for p in os.listdir(".") if p.lower().endswith(".zip")]
    for z in zips:
        try:
            with zipfile.ZipFile(z) as zf:
                names = zf.namelist()
                has_assets = any(n.lower().startswith("assets/") for n in names)
                if has_assets:
                    zf.extractall(".")
                else:
                    os.makedirs(d, exist_ok=True)
                    for n in names:
                        if n.lower().endswith((".png", ".jpg", ".jpeg", ".webp")):
                            target = os.path.join(d, os.path.basename(n))
                            with zf.open(n) as src, open(target, "wb") as dst:
                                dst.write(src.read())
            break
        except Exception as e:
            logging.warning("zip extract failed for %s: %s", z, e)
    if not os.path.isdir(d):
        logging.warning("assets dir not found: %s", d)

def pick_doom_image(code: str) -> str | None:
    """–ò—â–µ–º assets/<code>.(png|jpg|jpeg|webp), –∞ —Ç–∞–∫–∂–µ <code>_*.ext, <code>-*.ext, –ª—é–±–æ–π —Ä–µ–≥–∏—Å—Ç—Ä."""
    base = code.lower()
    d = ASSETS_DIR
    if not os.path.isdir(d):
        logging.warning("assets dir not found: %s", d)
        return None
    exts = ["png", "jpg", "jpeg", "webp"]
    patterns = []
    for ext in exts:
        patterns += [
            os.path.join(d, f"{base}.{ext}"),
            os.path.join(d, f"{base}_*.{ext}"),
            os.path.join(d, f"{base}-*.{ext}"),
            os.path.join(d, f"{base}.{ext.upper()}"),
            os.path.join(d, f"{base}_*.{ext.upper()}"),
            os.path.join(d, f"{base}-*.{ext.upper()}"),
        ]
    found = []
    for pat in patterns:
        found += glob.glob(pat)
    if found:
        found.sort()
        logging.info("picked doom image for %s: %s", code, found[0])
        return found[0]
    for p in sorted(Path(d).iterdir()):
        if p.is_file():
            stem = p.stem.lower()
            if stem == base or stem.startswith(base + "_") or stem.startswith(base + "-"):
                logging.info("fallback picked doom image for %s: %s", code, p)
                return str(p)
    logging.warning("no doom image for code=%s", code)
    return None

async def send_with_media(message, text_html: str, doom_code: str, branch_py: str):
    # 1) –∞—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    p = pick_doom_image(doom_code)
    if p and os.path.exists(p):
        try:
            await message.reply_photo(photo=open(p, "rb"), caption=text_html, parse_mode=ParseMode.HTML)
            return
        except Exception as e:
            logging.warning("failed to send category art %s: %s", p, e)
    # 2) –∏–∫–æ–Ω–∫–∞ –≤–µ—Ç–≤–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–≤–æ–∏–º misfortune.py)
    if ensure_icons and icon_filename:
        try:
            ensure_icons()
            ipath = icon_filename(branch_py)
            if os.path.exists(ipath):
                await message.reply_photo(photo=open(ipath, "rb"), caption=text_html, parse_mode=ParseMode.HTML)
                return
        except Exception as e:
            logging.warning("failed to send branch icon: %s", e)
    # 3) —Ç–µ–∫—Å—Ç
    await message.reply_text(text_html, parse_mode=ParseMode.HTML)

# ====== –ö–æ–º–∞–Ω–¥—ã ======
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caption = (
        "<b>HOWL ‚Äî –±–æ—Ç –Ω–µ—Å—á–∞—Å—Ç–∏–π</b>\n\n"
        "–£—Å–ª—ã—à–∞–ª –≤–æ–π –¥—É—Ö–∞? –ñ–º–∏ <b>¬´–ì–∞–¥–∞—Ç—å —Å–µ–π—á–∞—Å¬ª</b> –∏–ª–∏ <b>¬´–í–≤–µ—Å—Ç–∏ –º–æ–º–µ–Ω—Ç¬ª</b> ‚Äî –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–æ—è.\n"
        "–ú–æ–∂–Ω–æ –∏ –∫–æ–º–∞–Ω–¥–æ–π: <code>/howl YYYY-MM-DD [HH:MM]</code>.\n\n"
        "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω: –ê–ª–º–∞—Ç—ã/–ê—Å—Ç–∞–Ω–∞ ‚Äî <code>/settz Asia/Almaty</code>, "
        "–ê—Ç—ã—Ä–∞—É/–ê–∫—Ç–∞—É ‚Äî <code>/settz Asia/Atyrau</code>"
    )

    # üëá –±–ª–æ–∫ —Å –∫–∞–Ω–∞–ª–æ–º ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø (4 –ø—Ä–æ–±–µ–ª–∞)
    import random
    if random.random() < 0.2:  # 20% –∑–∞–ø—É—Å–∫–æ–≤
        caption += (
            "\n\nüì¢ –ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –µ—Å—Ç—å –∫–∞–Ω–∞–ª: "
            "<a href='https://t.me/sinology_ru'>@sinology_ru</a>"
        )

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÆ –ì–∞–¥–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="howl_now")],
        [InlineKeyboardButton("‚åö –í–≤–µ—Å—Ç–∏ –º–æ–º–µ–Ω—Ç", callback_data="howl_ask")],
        [InlineKeyboardButton("üßæ –ü—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–µ–≤", callback_data="howl_last")],
        [InlineKeyboardButton("‚öôÔ∏è –¢–∞–π–º-–∑–æ–Ω–∞ (–ø–æ–º–æ—â—å)", callback_data="help_tz")],
    ])

    welcome = "welcome.png"
    if os.path.exists(welcome):
        await update.message.reply_photo(
            photo=open(welcome, "rb"),
            caption=caption,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            caption,
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )


async def cmd_settz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "–ö–∞–∫ –∑–∞–¥–∞—Ç—å —Ç–∞–π–º-–∑–æ–Ω—É:\n"
            "‚Ä¢ –°–º–µ—â–µ–Ω–∏–µ: <code>/settz +6</code>\n"
            "‚Ä¢ IANA: <code>/settz Asia/Almaty</code>\n\n"
            "üá∞üáø –ê–ª–º–∞—Ç—ã/–ê—Å—Ç–∞–Ω–∞ ‚Äî <code>/settz Asia/Almaty</code>\n"
            "üá∞üáø –ê—Ç—ã—Ä–∞—É/–ê–∫—Ç–∞—É ‚Äî <code>/settz Asia/Atyrau</code>",
            parse_mode=ParseMode.HTML
        )
        return
    arg = context.args[0]
    try:
        _ = _parse_tz(arg)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º
        saved = _set_user_tz(update.effective_chat.id, arg)
        await update.message.reply_text(f"–¢–∞–π–º-–∑–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: <code>{saved}</code>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.message.reply_text(f"–ù–µ –ø–æ–Ω—è–ª —Ç–∞–π–º-–∑–æ–Ω—É: <code>{arg}</code>\n–û—à–∏–±–∫–∞: {e}", parse_mode=ParseMode.HTML)

async def cmd_tz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tzinfo = _get_user_tzinfo(update.effective_chat.id)
    now_local = datetime.now(tz=tzinfo).strftime("%Y-%m-%d %H:%M")
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∞—è —Ç–∞–π–º-–∑–æ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <b>{tzinfo}</b>\n–°–µ–π—á–∞—Å —É –≤–∞—Å: <b>{now_local}</b>",
        parse_mode=ParseMode.HTML
    )

async def cmd_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    items = _load_data().get(str(chat_id), [])
    if not items:
        await update.message.reply_text("–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ù–∞–∂–º–∏ ¬´–ì–∞–¥–∞—Ç—å —Å–µ–π—á–∞—Å¬ª –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –º–æ–º–µ–Ω—Ç.")
        return
    lines = [f"#{len(items)-i}. {it['ts']} ‚Äî {it['doom']} (—É—Ä. {it['lvl']})" for i, it in enumerate(reversed(items))]
    await update.message.reply_text("<b>–ü—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–µ–≤</b>\n" + "\n".join(lines), parse_mode=ParseMode.HTML)

async def cmd_howl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    salt = _salt(chat_id)
    user_tz = _get_user_tzinfo(chat_id)

    if context.args:
        try:
            if len(context.args) == 1:
                dt = datetime.strptime(context.args[0], "%Y-%m-%d")
            else:
                dt = datetime.strptime(context.args[0] + " " + context.args[1], "%Y-%m-%d %H:%M")
        except Exception:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /howl YYYY-MM-DD [HH:MM]")
            return
    else:
        dt = update.message.date.astimezone(user_tz).replace(tzinfo=None)

    r = read_howl(dt, salt=salt)
    await send_with_media(update.message, render_reading(r), r.doom["code"], r.branch_tuple[1])
    _record(chat_id, dt, r.doom["code"], r.doom_level)

async def cmd_diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = [f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–µ—Ç–æ–≤</b> (–∫–∞—Ç–∞–ª–æ–≥: <code>{ASSETS_DIR}</code>)"]
    if not os.path.isdir(ASSETS_DIR):
        await update.message.reply_text("\n".join(lines + ["–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª–æ–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –ø–∞–ø–∫—É assets/ –≤ –∫–æ—Ä–Ω–µ."]),
                                        parse_mode=ParseMode.HTML)
        return
    if MISFORTUNES:
        miss = []; ok = 0
        for m in MISFORTUNES:
            code = m.get("code", "").lower().strip()
            p = pick_doom_image(code)
            if p and os.path.exists(p): ok += 1
            else: miss.append(code)
        lines.append(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: <b>{ok}</b> / {len(MISFORTUNES)}")
        if miss:
            lines.append("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è: " + ", ".join(miss))
    else:
        files = sorted([p.name for p in Path(ASSETS_DIR).glob("*") if p.is_file()])[:12]
        lines.append("–ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤: " + (", ".join(files) if files else "–ø—É—Å—Ç–æ"))
    await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# ====== Inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ======
async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()

    if data == "howl_now":
        chat_id = update.effective_chat.id
        user_tz = _get_user_tzinfo(chat_id)
        salt = _salt(chat_id)
        dt = datetime.now(tz=user_tz).replace(tzinfo=None)
        r = read_howl(dt, salt=salt)
        await send_with_media(q.message, render_reading(r), r.doom["code"], r.branch_tuple[1])
        _record(chat_id, dt, r.doom["code"], r.doom_level)

    elif data == "howl_ask":
        prompt = "–ü—Ä–∏—à–ª–∏—Ç–µ –º–æ–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>YYYY-MM-DD HH:MM</code> (–º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è)"
        await q.message.reply_text(prompt, reply_markup=ForceReply(selective=True), parse_mode=ParseMode.HTML)

    elif data == "howl_last":
        await cmd_last(update, context)

    elif data == "help_tz":
        await q.message.reply_text(
            "–¢–∞–π–º-–∑–æ–Ω–∞ –Ω–∞ —á–∞—Ç:\n"
            "‚Ä¢ –°–º–µ—â–µ–Ω–∏–µ: <code>/settz +6</code>\n"
            "‚Ä¢ IANA: <code>/settz Asia/Almaty</code>\n"
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å: <code>/tz</code>",
            parse_mode=ParseMode.HTML
        )

# –ª–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ ForceReply (–¥–∞—Ç–∞/–≤—Ä–µ–º—è)
async def on_reply_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.reply_to_message:
        return
    if "–ü—Ä–∏—à–ª–∏—Ç–µ –º–æ–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ" not in (update.message.reply_to_message.text or ""):
        return
    chat_id = update.effective_chat.id
    salt = _salt(chat_id)
    txt = (update.message.text or "").strip()
    try:
        if " " in txt:
            dt = datetime.strptime(txt, "%Y-%m-%d %H:%M")
        else:
            dt = datetime.strptime(txt, "%Y-%m-%d")
    except Exception:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>2025-10-01 14:30</code>", parse_mode=ParseMode.HTML)
        return
    r = read_howl(dt, salt=salt)
    await send_with_media(update.message, render_reading(r), r.doom["code"], r.branch_tuple[1])
    _record(chat_id, dt, r.doom["code"], r.doom_level)

# ====== main ======
async def _set_bot_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("howl", "–ì–∞–¥–∞—Ç—å —Å–µ–π—á–∞—Å / –ø–æ –º–æ–º–µ–Ω—Ç—É"),
        BotCommand("last", "–ü—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–µ–≤"),
        BotCommand("settz", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º-–∑–æ–Ω—É"),
        BotCommand("tz", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ç–∞–π–º-–∑–æ–Ω—É"),
        BotCommand("help", "–ü–æ–º–æ—â—å / –º–µ–Ω—é"),
        BotCommand("diag", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—Å—Å–µ—Ç–æ–≤"),
    ])

def main():
    ensure_assets_dir()  # –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å assets.zip, –µ—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ—Ç
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise SystemExit("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_TOKEN")

    app = Application.builder().token(token).defaults(Defaults(parse_mode=ParseMode.HTML)).build()
    app.post_init = _set_bot_commands

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help",  cmd_help))
    app.add_handler(CommandHandler("howl",  cmd_howl))
    app.add_handler(CommandHandler("last",  cmd_last))
    app.add_handler(CommandHandler("settz", cmd_settz))
    app.add_handler(CommandHandler("tz",    cmd_tz))
    app.add_handler(CommandHandler("diag",  cmd_diag))
    app.add_handler(CallbackQueryHandler(on_cb))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_reply_datetime))

    webhook_base = os.getenv("WEBHOOK_URL") or os.getenv("RENDER_EXTERNAL_URL")
    port = int(os.getenv("PORT", "8080"))
    if webhook_base:
        webhook_url = webhook_base.rstrip("/") + "/" + token
        logging.info("Starting webhook at %s", webhook_url)
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=token,
            webhook_url=webhook_url,
        )
    else:
        logging.info("Starting long polling")
        app.run_polling()

if __name__ == "__main__":
    main()
