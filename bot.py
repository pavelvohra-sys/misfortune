# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç HOWL (–∏–∫–æ–Ω–∫–∏ –≤–µ—Ç–≤–µ–π, —Ç–∞–±—É –µ–¥—ã, –±–µ–∑ heavy-omens).
–ö–æ–º–∞–Ω–¥—ã:
  /start, /help
  /howl [YYYY-MM-DD [HH:MM]]
  /last
  /icons on|off
  /show_icons
  /today /date /month /range /ics
"""
import os, json, logging
from datetime import date, datetime, timezone, timedelta
from dateutil.relativedelta import relativedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from misfortune import (
    read_howl, render_reading, ics_for_year,
    BRANCHES, ANIMALS, ensure_icons, icon_filename
)

# === –ù–ê–°–¢–†–û–ô –ß–ê–°–û–í–û–ô –ü–û–Ø–° –ó–î–ï–°–¨ ===
TIMEZONE_OFFSET_HOURS = 3  # –ú–æ—Å–∫–≤–∞ = +3; –ø–æ–º–µ–Ω—è–π –ø–æ–¥ —Å–µ–±—è
LOCAL_TZ = timezone(timedelta(hours=TIMEZONE_OFFSET_HOURS))

# –õ–æ–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

DATA_FILE = "howls.json"
SHOW_ICONS = set()  # chat_id, –≥–¥–µ –≤–∫–ª—é—á–µ–Ω—ã –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã

def _load_data():
    if not os.path.exists(DATA_FILE): return {}
    try:
        with open(DATA_FILE,"r",encoding="utf-8") as f: return json.load(f)
    except Exception: return {}

def _save_data(db):
    tmp = DATA_FILE + ".tmp"
    with open(tmp,"w",encoding="utf-8") as f: json.dump(db, f, ensure_ascii=False, indent=2)
    os.replace(tmp, DATA_FILE)

def _salt(chat_id: int) -> int: return abs(chat_id) % 97

async def _send_reading(update: Update, text: str, py_code: str):
    chat_id = update.effective_chat.id
    if chat_id in SHOW_ICONS:
        ensure_icons()
        p = icon_filename(py_code)
        if os.path.exists(p):
            await update.message.reply_photo(photo=open(p, "rb"), caption=text)
            return
    await update.message.reply_text(text)

# --- –∫–æ–º–∞–Ω–¥—ã ---
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "HOWL üíÄ ‚Äî —É—Å–ª—ã—à–∞–ª –≤–æ–π –¥—É—Ö–∞ ‚Üí –ø—Ä–∏–≥–æ–≤–æ—Ä (—á—ë—Ä–Ω—ã–π —é–º–æ—Ä)\n\n"
        "/howl ‚Äî —Å–µ–π—á–∞—Å ‚Ä¢ /howl YYYY-MM-DD [HH:MM] ‚Äî –Ω–∞ –º–æ–º–µ–Ω—Ç\n"
        "/icons on|off ‚Äî –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö ‚Ä¢ /show_icons ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ\n"
        "/last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–æ–µ–≤\n"
        "/today /date /month /range /ics ‚Äî –∫–ª–∞—Å—Å–∏–∫–∞\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC{TIMEZONE_OFFSET_HOURS:+d}:00"
    )

async def cmd_icons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not context.args or context.args[0] not in ("on","off"):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /icons on | /icons off"); return
    if context.args[0] == "on":
        SHOW_ICONS.add(chat_id); await update.message.reply_text("–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã: ON")
    else:
        SHOW_ICONS.discard(chat_id); await update.message.reply_text("–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã: OFF")

async def cmd_show_icons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_icons()
    for han, py, ru in BRANCHES:
        p = icon_filename(py)
        if os.path.exists(p):
            await update.message.reply_photo(photo=open(p,"rb"), caption=f"{ANIMALS[py]} {han} {py} / {ru}")

async def cmd_howl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    salt = _salt(chat_id)
    if context.args:
        try:
            if len(context.args) == 1:
                dt = datetime.strptime(context.args[0], "%Y-%m-%d")
            else:
                dt = datetime.strptime(context.args[0]+" "+context.args[1], "%Y-%m-%d %H:%M")
        except Exception:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /howl YYYY-MM-DD [HH:MM]"); return
    else:
        # Telegram –¥–∞—ë—Ç UTC ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–∞—à LOCAL_TZ
        dt = update.message.date.astimezone(LOCAL_TZ).replace(tzinfo=None)
    r = read_howl(dt, salt=salt)
    await _send_reading(update, render_reading(r), r.branch_tuple[1])

    db = _load_data()
    key = str(chat_id)
    db.setdefault(key, []).append({"ts": dt.isoformat(timespec="minutes"), "doom": r.doom["code"], "lvl": r.doom_level})
    db[key] = db[key][-50:]
    _save_data(db)

async def cmd_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    items = _load_data().get(str(chat_id), [])[-5:]
    if not items:
        await update.message.reply_text("–ü—É—Å—Ç–æ. –ï—â—ë –Ω–µ –≤—ã–ª–∏."); return
    lines = [f"#{i+1} {it['ts']} ‚Äî {it['doom']} (—É—Ä. {it['lvl']})" for i,it in enumerate(items)]
    await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–∏:\n" + "\n".join(lines))

# –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ—Ç –∂–µ –¥–≤–∏–∂–æ–∫)
async def cmd_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id; salt = _salt(chat_id)
    dt = update.message.date.astimezone(LOCAL_TZ).replace(tzinfo=None)
    r = read_howl(dt, salt=salt)
    await _send_reading(update, render_reading(r), r.branch_tuple[1])

async def cmd_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id; salt = _salt(chat_id)
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /date YYYY-MM-DD"); return
    try:
        d = datetime.strptime(context.args[0], "%Y-%m-%d")
    except Exception:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /date 2025-10-01"); return
    r = read_howl(d, salt=salt)
    await _send_reading(update, render_reading(r), r.branch_tuple[1])

async def cmd_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id; salt = _salt(chat_id)
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /month YYYY-MM"); return
    try:
        y, m = map(int, context.args[0].split("-")); cur = datetime(y, m, 1)
    except Exception:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /month 2025-10"); return
    lines = []
    while cur.month == m:
        r = read_howl(cur, salt=salt)
        lines.append(r.doom["emoji"]+" "+cur.date().isoformat()+" ‚Äî "+r.doom["name"])
        cur += relativedelta(days=1)
    chunk = ""
    for line in lines:
        if len(chunk) + len(line) + 1 > 4000:
            await update.message.reply_text(chunk.strip()); chunk = ""
        chunk += line + "\n"
    if chunk: await update.message.reply_text(chunk.strip())

async def cmd_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id; salt = _salt(chat_id)
    if len(context.args) != 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /range 2025-09-01 2025-09-30"); return
    try:
        s = datetime.strptime(context.args[0], "%Y-%m-%d")
        e = datetime.strptime(context.args[1], "%Y-%m-%d")
    except Exception:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /range 2025-09-01 2025-09-30"); return
    if e < s: s, e = e, s
    lines, cur = [], s
    while cur <= e:
        r = read_howl(cur, salt=salt)
        lines.append(r.doom["emoji"]+" "+cur.date().isoformat()+" ‚Äî "+r.doom["name"])
        cur += relativedelta(days=1)
    chunk = ""
    for line in lines:
        if len(chunk) + len(line) + 1 > 4000:
            await update.message.reply_text(chunk.strip()); chunk = ""
        chunk += line + "\n"
    if chunk: await update.message.reply_text(chunk.strip())

async def cmd_ics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    year = date.today().year
    if context.args:
        try: year = int(context.args[0])
        except Exception: pass
    ics = ics_for_year(year)
    fname = f"daily_misfortune_{year}.ics"
    with open(fname, "w", encoding="utf-8") as f: f.write(ics)
    await update.message.reply_document(open(fname, "rb"), filename=fname, caption=f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å {year}")

def main():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token: raise SystemExit("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN —Å —Ç–æ–∫–µ–Ω–æ–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.")
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start",  cmd_start))
    app.add_handler(CommandHandler("help",   cmd_start))
    app.add_handler(CommandHandler("icons",  cmd_icons))
    app.add_handler(CommandHandler("show_icons", cmd_show_icons))
    app.add_handler(CommandHandler("howl",   cmd_howl))
    app.add_handler(CommandHandler("last",   cmd_last))

    app.add_handler(CommandHandler("today",  cmd_today))
    app.add_handler(CommandHandler("date",   cmd_date))
    app.add_handler(CommandHandler("month",  cmd_month))
    app.add_handler(CommandHandler("range",  cmd_range))
    app.add_handler(CommandHandler("ics",    cmd_ics))

    app.run_polling()

if __name__ == "__main__":
    main()
